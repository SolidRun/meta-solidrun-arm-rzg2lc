diff --git a/makefile b/makefile
index 5731098..a507050 100644
--- a/makefile
+++ b/makefile
@@ -128,6 +128,15 @@ ifeq ("$(INTERNAL_MEMORY_ONLY)", "ENABLE")
 DDR_TYPE = INTERNAL
 endif
 
+# Select Secure Boot Mode
+ifeq ("$(TRUSTED_BOARD_BOOT)", "")
+TRUSTED_BOARD_BOOT = DISABLE
+endif
+
+ifeq ("$(TRUSTED_BOARD_BOOT)", "ENABLE")
+BOOTMODE = _TBB
+endif
+
 #CPU
 CPU     = 
 AArch   = 64
@@ -143,7 +152,7 @@ CROSS_COMPILE ?= aarch64-elf-
 
 CFLAGS += -O0 -fno-stack-protector -fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables
 BOOT_DEF    = Writer
-FILE_NAME   = $(OUTPUT_DIR)/Flash_Writer_SCIF$(FILENAME_ADD)_$(DDR_TYPE)_$(DDR_SIZE)
+FILE_NAME   = $(OUTPUT_DIR)/Flash_Writer_SCIF$(FILENAME_ADD)_$(DDR_TYPE)_$(DDR_SIZE)$(BOOTMODE)
 
 ifeq ("$(DEVICE)", "RZG2L")
 	CFLAGS += -DRZG2L=1
@@ -221,7 +230,11 @@ endif
 
 ifeq ("$(INTERNAL_MEMORY_ONLY)", "DISABLE")
 	CFLAGS += -DINTERNAL_MEMORY_ONLY=0
-	MEMORY_DEF = memory_writer.def
+	ifeq ("$(TRUSTED_BOARD_BOOT)", "ENABLE")
+		MEMORY_DEF = memory_writer_tbb.def
+	else
+		MEMORY_DEF = memory_writer.def
+	endif
 endif
 ifeq ("$(INTERNAL_MEMORY_ONLY)", "ENABLE")
 	CFLAGS += -DINTERNAL_MEMORY_ONLY=1
diff --git a/memory_writer_tbb.def b/memory_writer_tbb.def
new file mode 100644
index 0000000..a95d778
--- /dev/null
+++ b/memory_writer_tbb.def
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2015-2021, Renesas Electronics Corporation. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+MEMORY {
+	RAM2 (rwxa): ORIGIN = 0x00010000, LENGTH = 0x00001E00
+	CERT (rwxa): ORIGIN = 0x00011E00, LENGTH = 0x00001200
+	RAM  (rwxa): ORIGIN = 0x00013000, LENGTH = 0x0001C000
+	RAM3 (rwxa): ORIGIN = 0x0002F000, LENGTH = 0x00001000
+}
+
+SECTIONS
+{
+	.cert (NOLOAD) : {
+		/* 
+		   This is the section where the boot parameter and manifests for 
+		   trusted board boot are located.
+		   Boot parameter and manifests are created in the external environment.
+		*/ 
+	} > CERT
+
+	.text : {
+		__RO_START__ = .;
+		*(.text*)
+		*(.rodata*)
+		. = NEXT(64);
+		__RO_END__ = .;
+	} > RAM
+
+	.data : {
+		__DATA_START__ = .;
+		 *(.data)
+		. = NEXT(64);
+		__DATA_END__ = .;
+	} > RAM
+
+	__DATA_SIZE__ = SIZEOF(.data);
+
+	__LOAD_SIZE__ = __DATA_END__ - __RO_START__;
+
+	.bss : {
+		__BSS_START__ = .;
+		 *(.bss)
+		 *(COMMON)
+		 . = NEXT(64);
+		__BSS_END__ = .;
+	} > RAM2
+
+	stacks (NOLOAD) : ALIGN(64) {
+		__STACKS_START__ = .;
+		KEEP(*(writer_stack))
+		__STACKS_END__ = .;
+	} > RAM2
+
+	__BSS_SIZE__ = SIZEOF(.bss);
+}
